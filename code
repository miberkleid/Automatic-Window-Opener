/*
Michael Iberkleid
 Pranav Gokhale
 Hack[Princeton] 2013
 Code for roject Thundershield (automatic window opener) V1.0 29.03.2013
 */


// include the library code:
#include <LiquidCrystal.h>
#include <AFMotor.h>

//initialze the motor
AF_Stepper motor(200,2);
// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 8, 4, 3, 2);


const int redLED = 10;
const int blueLED = 7;
const int buttonPin = 13;
const int tempPin = A4;
const float baselineTemp = 20.0;
const int IRPin = 9;

int reading;

// Create a global variable to hold the 
// state of the switch. This variable is persistent 
// throughout the program. Whenever you refer to 
// switchState, youâ€™re talking about the number it holds
int switchState = 0;
int lastButtonState = LOW;
long lastDebounceTime = 0;
long debounceDelay = 50;
int state = 2;

void setup() {
  motor.setSpeed(10); // 10 rpm

  Serial.begin(9600); // set up Serial library at 9600 bps

  // declate I/Os
  pinMode(buttonPin, INPUT);
  pinMode(redLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  pinMode(IRPin, INPUT);

  //TEST LED set up
  //test LED's out red 2 Blue --> red & blue --> red & blue

  //red on
  digitalWrite(redLED, HIGH);
  delay(1000);
  digitalWrite(redLED, LOW);

  //blue on
  digitalWrite(blueLED, HIGH);
  delay(1000);
  digitalWrite(blueLED, LOW);
  delay(1000);

  //both on blink twice
  digitalWrite(redLED, HIGH);
  digitalWrite(blueLED, HIGH);
  delay(500);
  digitalWrite(redLED, LOW);
  digitalWrite(blueLED, LOW);
  delay (500);
  digitalWrite(redLED, HIGH);
  digitalWrite(blueLED, HIGH);
  delay(500);
  digitalWrite(redLED, LOW);
  digitalWrite(blueLED, LOW);

  // set up the number of columns and rows on the LCD 
  lcd.begin(16, 2);
  // Print a message to the LCD.
  lcd.print("Welcome to:");
  // set the cursor to column 0, line 1
  // line 1 is the second row, since counting begins with 0
  lcd.setCursor(0, 1);
  // print to the second line
  lcd.print("Lightning Shield"); 
  delay (2000);  
}

void loop() {


  //LIGHT sensor section
  if(state == 0) {
    lcd.clear();
    // set the cursor to column 0, line 0     
    lcd.setCursor(0, 0);
    lcd.print("MODE: Light");
    delay (100);


    //read the input from A5 and store it in a variable
    int lightSensorValue = analogRead(A5);

    // variable to determine curtain status
    //where 0 means curtain is down
    int isUp = 0;

    while(state == 0){
      lightSensorValue = analogRead(A5);
      Serial.println(lightSensorValue, DEC);
      //delay (1000);

      //close curtain at night
      if (lightSensorValue < 150 && isUp == 0)
      {
        digitalWrite(blueLED, HIGH);
        delay(5000);
        digitalWrite(blueLED, LOW);

        /* optional for single LED Blink Twice vs Blink once to indicate states
         digitalWrite(redLED, HIGH);
         delay(1000);
         digitalWrite(redLED, LOW);
         delay (500);
         digitalWrite(redLED, HIGH);
         delay(1000);
         digitalWrite(redLED, LOW);*/

        motor.step(100, FORWARD, SINGLE);
        isUp = isUp +1;
        Serial.println("is up");
        Serial.println(isUp, DEC);

      }
      if (lightSensorValue > 200 && isUp == 1)
      {
        digitalWrite(redLED, HIGH);
        delay(5000);
        digitalWrite(redLED, LOW);
        motor.step(100, BACKWARD, SINGLE);
        isUp = isUp -1;

        //serial prints to debug
        Serial.println("is up");
        Serial.println(isUp, DEC);
      }

      reading = digitalRead(buttonPin);
      if(reading != lastButtonState && (millis()-lastDebounceTime > debounceDelay)) {
        // state should change
        lastDebounceTime = millis();
        lastButtonState = reading;
        if(reading == HIGH)
          state = (state+1)%3;
      }

    }
  }
  //TEMPEREATURE Sensor
  if(state == 1) {
    lcd.clear();
    // set the cursor to column 0, line 0     
    lcd.setCursor(0, 0);
    lcd.print("MODE: Temp");
    delay (100);

    // variable to determine curtain status
    //where 0 means curtain is down
    int isUp = 0;
    int i = 0;
    while(state == 1){
      if(i==0) {
        int tempSensorValue = analogRead(A0);
        // read the value on AnalogIn pin 0 
        // and store it in a variable
        int sensorVal = analogRead(tempPin);

        // send the 10-bit sensor value out the serial port
        Serial.print("sensor Value: ");
        Serial.print(sensorVal); 

        // convert the ADC reading to voltage
        float voltage = (sensorVal/1024.0) * 5.0;

        // Send the voltage level out the Serial port
        Serial.print(", Volts: ");
        Serial.print(voltage);

        // convert the voltage to temperature in degrees C
        // the sensor changes .00125 mV per degree
        // the datasheet says there's a 500 mV offset
        // ((volatge - 500mV) times 8)
        Serial.print(", degrees C: "); 
        float temperature = (voltage - .5) * 100;
        Serial.println(temperature);
        // line 1 is the second row, since counting begins with 0
        lcd.setCursor(0, 1);
        // print to the second line
        lcd.print("TEMP:");
        lcd.print(temperature);
        lcd.print(" C");
        delay (1);

        //close curtain when too hot
        if (temperature < 26 && isUp == 0)
        {
          digitalWrite(blueLED, HIGH);
          delay(5000);
          digitalWrite(blueLED, LOW);

          /* optional for single LED Blink Twice vs Blink once to indicate states
           digitalWrite(redLED, HIGH);
           delay(1000);
           digitalWrite(redLED, LOW);
           delay (500);
           digitalWrite(redLED, HIGH);
           delay(1000);
           digitalWrite(redLED, LOW);*/

          motor.step(100, FORWARD, SINGLE);
          isUp = isUp +1;
          Serial.println("is up");
          Serial.println(isUp, DEC);
        }

        //open curtain when too cold
        if (temperature > 30 && isUp == 1)
        {
          digitalWrite(redLED, HIGH);
          delay(5000);
          digitalWrite(redLED, LOW);
          motor.step(100, BACKWARD, SINGLE);
          isUp = isUp -1;
          Serial.println("is up");
          Serial.println(isUp, DEC);
        }
      }
      i = (i+1)%500000;
      reading = digitalRead(buttonPin);
      if(reading != lastButtonState && (millis()-lastDebounceTime > debounceDelay)) {
        // state should change
        lastDebounceTime = millis();
        lastButtonState = reading;
        if(reading == HIGH)
          state = (state+1)%3;
      }
    }

  }
  //IR Sensor
  if(state == 2) {
    lcd.clear();
    // set the cursor to column 0, line 0     
    lcd.setCursor(0, 0);
    lcd.print("MODE: IR");
    delay (100);

    int IRState = 0;
    while(state == 2) {
      if(digitalRead(IRPin) == 0 && IRState == 0) {
        IRState = 1;
        digitalWrite(blueLED, HIGH);
        delay(5000);
        digitalWrite(blueLED, LOW);

        /* optional for single LED Blink Twice vs Blink once to indicate states
         digitalWrite(redLED, HIGH);
         delay(1000);
         digitalWrite(redLED, LOW);
         delay (500);
         digitalWrite(redLED, HIGH);
         delay(1000);
         digitalWrite(redLED, LOW);*/

        motor.step(250, FORWARD, SINGLE);
        Serial.println("is up");
      }
      else if (digitalRead(IRPin) == 0 && IRState == 1) {
        IRState = 0;
        digitalWrite(redLED, HIGH);
        delay(5000);
        digitalWrite(redLED, LOW);
        motor.step(250, BACKWARD, SINGLE);
        Serial.println("is down");
      }    

      reading = digitalRead(buttonPin);
      if(reading != lastButtonState && (millis()-lastDebounceTime > debounceDelay)) {
        // state should change
        lastDebounceTime = millis();
        lastButtonState = reading;
        if(reading == HIGH)
          state = (state+1)%3;
      }
    }

  }


}


